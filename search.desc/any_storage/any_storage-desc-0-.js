searchState.loadedDescShard("any_storage", 0, "Virtual FileStore Abstraction for different Backends\nA directory entry.\nAssociated type for directories in the storage system.\nEnum representing either a file or a directory entry.\nAssociated type for entries in the directory.\nA file entry.\nAssociated type for files in the storage system.\nAssociated type for the reader that reads the file’s …\nAssociated type for the reader that reads the file’s …\nAssociated type for the metadata associated with the file.\nStruct for stores that don’t support writing\nAssociated type for the reader that iterates over the …\nTrait representing a generic storage system.\nTrait representing a directory in the storage system.\nTrait for a reader that streams entries from a directory.\nTrait representing a file in the storage system.\nTrait representing a reader that can asynchronously read …\nTrait representing a writer that can asynchronously write …\nTrait representing the metadata of a file.\nModule wrapping all the implementations in an enum.\nReturns a reference to the directory if the entry is a …\nReturns a reference to the file if the entry is a file.\nReturns the creation timestamp of the file (epoch time).\nDeletes a directory if empty\nDeletes the file\nDeletes a directory and its content\nChecks if the directory exists.\nChecks if the file exists.\nReturns the file’s name if it exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a directory at the specified path.\nRetrieves a file at the specified path.\nModule for HTTP storage implementation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a directory, returning an error if …\nConverts the entry into a file, returning an error if …\nReturns <code>true</code> if the entry is a directory.\nReturns <code>true</code> if the entry is a file.\nModule for local storage implementation.\nRetrieves the metadata of the file.\nReturns the last modification timestamp of the file (epoch …\nCreates a new <code>LocalStoreEntry</code> from a <code>tokio::fs::DirEntry</code>.\nModule for pCloud storage implementation.\nReads the contents of the directory.\nReads a portion of the file’s content, specified by a …\nReturns the root directory of the store.\nReturns the size of the file in bytes.\nCreates a writer\nType alias for entries in the store, which can be files or …\nA directory entry.\nA file entry.\nCreate a <code>AnyStore</code> based on the configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPolls for the next directory entry.\nA directory entry.\nA file entry.\nPublic HTTP-backed file store supporting asynchronous …\nRepresentation of a directory in the HTTP store.\nStream reader over entries within an HTTP directory …\nRepresents an entry in the HTTP store (file or directory).\nRepresentation of a file in the HTTP store.\nMetadata for an HTTP file, containing size and last …\nReader for streaming bytes from a remote HTTP file.\nReturns 0 as creation time is not available over HTTP.\nChecks if the HTTP directory exists via a HEAD request.\nChecks if the HTTP file exists via a HEAD request.\nReturns the filename portion of the HTTP path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a directory from the HTTP store at the given …\nRetrieves a file from the HTTP store at the given path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the HTTP file metadata (size and last modified).\nReturns the last modified time (as a UNIX timestamp).\nCreates a new <code>HttpStore</code> from a base URL.\nReturns the next directory entry from the parsed HTML …\nPolls the next chunk of data from the HTTP byte stream.\nLists the entries in the HTTP directory by fetching and …\nBegins reading a file from the HTTP store for the given …\nReturns the file size in bytes.\nA directory entry.\nA file entry.\nWrapper for the local store, enabling shared ownership.\nConfiguration for <code>LocalStore</code>.\nRepresentation of a directory in the local store.\nReader for streaming entries from a local store directory.\nType alias for entries in the local store, which can be …\nRepresentation of a file in the local store.\nMetadata associated with a file in the local store (size, …\nReader for asynchronously reading the contents of a file …\nReturns the creation timestamp of the file (epoch time).\nChecks if the directory exists.\nChecks if the file exists.\nRetrieves the file name from the path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>PathBuf</code> into a <code>LocalStore</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a directory at the specified path in the local …\nRetrieves a file at the specified path in the local store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the metadata of the file.\nReturns the last modification timestamp of the file (epoch …\nCreates a new <code>LocalStoreEntry</code> from a <code>tokio::fs::DirEntry</code>.\nConstructor of the localstore\nRoot directory for that store\nPolls for the next directory entry.\nPolls for reading data from the file.\nReads the contents of the directory.\nReads a portion of the file’s content, specified by a …\nReturns the size of the file in bytes.\nA directory entry.\nA file entry.\nA store backed by the pCloud remote storage service.\nA directory in the pCloud file store.\nA streaming reader over entries in a pCloud directory.\nRepresents a file or directory entry within the pCloud …\nA file in the pCloud file store.\nMetadata for a file in the pCloud store.\nFile reader type for pCloud files.\nWriter to PCloud file\nReturns the UNIX timestamp when the file was created.\nChecks if the directory exists on pCloud.\nChecks whether the file exists on pCloud.\nReturns the filename portion of the file’s path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a directory handle for the given path in the …\nRetrieves a file handle for the given path in the pCloud …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves metadata about the file (size, creation, and …\nReturns the UNIX timestamp when the file was last modified.\nCreates a new <code>PCloudStore</code> using a base URL and login …\nPolls the next entry in the directory listing.\nReads the directory contents from pCloud and returns an …\nReads a byte range of the file content using a download …\nReturns the file size in bytes.\nCreates a writer to a file in pcloud")